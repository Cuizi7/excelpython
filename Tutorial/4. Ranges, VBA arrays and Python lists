Ranges, lists and SAFEARRAYs
---

If you pass a VBA object to an ExcelPython functions that expect a Python object, it will get converted automatically.

That's why you can do the following

  ?PyStr(Range("A1:C1").Value2)
  [[3.0, 1.0, 2.0]]
   
The function `PyStr` applies the Python `str` function to whatever object you pass it. If that object is not already a Python object, ExcelPython will convert it for you. Equivalently, you can perform this conversion explicitly, using the `PyObj` function which converts its argument into the corresponding Python object:

  ?PyStr(PyObj(Range("A1:C1").Value2))
  [[3.0, 1.0, 2.0]]

In this specific examples, the object that gets passed is a VBA array:

  ?TypeName(Range("A1:C1").Value2)
  Variant()

Specifically, it's a 1x3 two-dimensional array:

  ?UBound(Range("A1:C1").Value2,1) & " to " & LBound(Range("A1:C1").Value2, 1)
  1 to 1
  ?UBound(Range("A1:C1").Value2,2) & " to " & LBound(Range("A1:C1").Value2, 2)
  3 to 1
  
This is an 'oddity' of Excel's VBA model - the values of 1x1 ranges are scalars:

  ?TypeName(Range("A1").Value2)
  Double
  
and all other size ranges have two-dimensional array values.

Since two-dimensional lists do not exist in Python, it gets converted to a list-of-lists. Often however, you will want to pass a range as a simple one-dimensional list. Consider for example the built-in Python function `sorted`. If you call this function on the range "A1:C1" it returns the same value as is passed in:

  ?PyStr(PyBuiltin("sorted", PyTuple(Range("A1:C1").Value2)))
  [[3.0, 1.0, 2.0]]

This is because `sorted` only sorts the top-level list, which contains only one element `[3.0, 1.0, 2.0]`.

The VBA code is equivalent to the following Python code:
```python
sorted([[3.0, 1.0, 2.0]])
```
but we want the equivalent to:
```python
sorted([3.0, 1.0, 2.0])
```

To do this, you must perform the conversion from two-dimensional VBA array to Python object explicitly, specifying the desired dimensionality of the Python object:

  ?PyStr(PyObj(Range("A1:C1").Value2, 1))
  [3.0, 1.0, 2.0]
  ?PyStr(PyBuiltin("sorted", PyTuple(PyObj(Range("A1:C1").Value2, 1))))
  [1.0, 2.0, 3.0]


